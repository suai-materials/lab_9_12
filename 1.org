* Лабораторная работа № 9-12

Тема: Профилирование кода средствами инструментальной среды разработки.
Разработка тестовых модулей проекта. Выполнение функционального тестирования
и тестирования интеграции. Документирование результатов.
Тестирование интерфейса пользователя.

Цель: использование технологий и инструментов отладки и тестирования,
встроенных в Visual Studio для выполнения тестирования разного типа
с целью обнаружения ошибок и их дальнейшее исправление, ведение документации
и анализ результатов тестирования.


1. Выполните профилирование кода сайта на Bottle из предыдущей ЛР с помощью команды
   Отладка > Запустить профилирование Python (Debug > Launch python profiling…),
   по умолчанию в окне настроек должно отобразиться название проекта:

   #+CAPTION: Profiling в PyCharm
   [[file:images/2023-05-02_19-29-16_screenshot.png]]

   Полученный отчёт:

   #+CAPTION: Отчёт профилирования
   [[file:images/2023-05-02_19-31-41_screenshot.png]]

   Сравнение двух отчётов:

   #+CAPTION: Сравнение двух отчётов
   [[file:images/2023-05-02_19-34-43_screenshot.png]]

2. Выполните примеры unit-тестов для простейшего модуля Python с функциями калькулятора. Создайте консольное приложение как в ЛР№1. Модуль calc.py будет представлять собой библиотеку, содержащую функции для выполнения основных арифметический действий:

   #+INCLUDE: ./codes/calc.py src python

   Для того, чтобы протестировать эту библиотеку, создайте отдельный файл с названием test_calc.py и поместите туда функции, которые проверяют корректность работы модуля:

   #+INCLUDE: ./codes/test_calc.py src python

   Запустите test_calc.py, выбрав в его контекстном меню Запуск без отладки.

   #+CAPTION: Тестирование =calc=
   [[file:images/2023-05-02_19-41-47_screenshot.png]]

3. Для тестирования набора функций из calc.py с помощью unittest создайте файл с именем utest_calc.py и следующим кодом:

   #+INCLUDE: ./codes/test_calc.py src python

   #+CAPTION: Запуск тестов
   [[file:images/2023-05-02_19-52-49_screenshot.png]]

   Можно сделать запрос расширенной информации по пройденным тестам, для этого необходимо добавить ключ –v.
   Запустите скрипт utest_calc.py в терминале посредством контекстного меню.
   Введите команду python -m unittest -v utest_calc.py. 

   #+CAPTION: Показ всех тестов
   [[file:images/2023-05-02_19-53-38_screenshot.png]]

4. Создайте ещё одно консольное приложение.
   Подготовьте VS для создания unit-тестов с помощью фреймворка.
   Для этого щелкните проект правой кнопкой мыши в обозревателе решений и выберите платформу
   unittest на вкладке Тест в области свойств (или нажав на значок свойств в панели его инструментов).

   #+CAPTION: Создание проекта в PyCharm
   [[file:images/2023-05-02_20-09-38_screenshot.png]]

   Создайте два unit-теста для проверки работы регулярного выражения на соответствие email
   (вынесите формирование и сравнение со строкой в главный модуль myform_mail.py),
   в одном используя метод assertFalse,
   а в другом – assertTrue (подробнее о методах
   в официальной документации или статье https://tirinox.ru/unit-test-python/).

   В unit-тесте с assertFalse в цикле проверяйте список с примерами email неверного
   формата (перечислить возможные тестовые случаи, не менее 12 с разными типами ошибок),
   например, list_mail_uncor = ["", "1", "m1@", "@mail", …], а в unit-тесте с assertTrue –
   список с корректными email, к примеру, list_mail_cor = ["m.m@mail.ru", "m1@gmail.com", …].

   #+CAPTION: =my_form_mail.py=
   #+INCLUDE: ./codes/my_form_mail.py src python

   #+CAPTION: =ctest_form_mail.py=
   #+INCLUDE: ./codes/ctest_form_mail.py src python

   Ошибка:

   #+CAPTION: Демонстрация ошибки
   [[file:images/2023-05-02_20-58-51_screenshot.png]]

   Суть ошибки в том, что все не все символы были в проверке,
   которые могут быть в почте могут быть в почте.

   Исправленная версия регулярного выражения:
   
   ~r"[a-zA-Z0-9._&=‘\-+]{1,256}@[a-zA-Z0-9]{1,100}\.[a-zA-Z0-9]{1,7}"~

   #+CAPTION: Исправленая версия
   [[file:images/2023-05-02_21-04-04_screenshot.png]]

5. Вернитесь к приложению Bottle.
   Интегрируйте модули кода с проверкой работы регулярного выражения
   и соответствующими unit-тестами в свой проект.
   Выполните запуск тестов и отладку работы проекта.
   Зафиксируйте в Git соответствующие изменения (сделайте не менее 2 коммитов).
   Сделайте push на Github.
   Задокументируйте все результаты работы.

   Перенёс файлы функции проверки почты и её тестирование в проект,
   тест выделил в директорию tests.

   #+CAPTION: Первый коммит
   [[file:images/2023-05-02_21-47-15_screenshot.png]]

   Интегрирую функцию в код:
   #+CAPTION: Демонстрация интеграции
   [[file:images/2023-05-02_21-51-17_screenshot.png]]

   Сделал коммит.
   
   #+CAPTION: История коммитов
   [[file:images/2023-05-02_21-52-32_screenshot.png]]

6. С помощью инструментария онлайн-сервиса https://wave.webaim.org/
   выполните проверку валидации и
   тестирование юзабилити следующих сайтов:
    http://bottlepy.org/docs/dev/index.html, https://pypi.org/
    и https://python-scripts.com/web-frameworks.
    Перечислите основные ошибки и предупреждения,
    назовите структурные элементы интерфейса и
    особенности (перейти по соответствующим вкладкам раздела
    «Summary», сделать заключение структуре).
   
